# NOTE: replace all fields with appropriat value enclosed in {{}}
# faragte file with ALB and security groups
service: ecs-fargate
frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  region: ap-southeast-1 # replace it with correct region
  stage: ${opt:stage, "dev"}
  deploymentBucket: ${self:custom.artifact.${opt:stage, self:provider.stage}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - "iam:PassRole"
      Resource: "*"
    - Effect: Allow
      Action:
        - "ecs:RunTask"
        - "ecs:StopTask"
        - "ecs:DescribeTasks"
      Resource: "*"

plugins:
  - serverless-fargate-tasks
package:
  exclude:
    - .idea/**
    - .git/**
    - .gitignore
    - tests/**
    - coverage/**
    - .DS_Store
    - .eslintrc.json
    - package-lock.json
    - package.json
    - .serverless/**
    - node_modules/aws-sdk/**
    - node_modules/aws-sdk-mock/**
custom:
  username: ${opt:username, ""}
  artifact:
    prod: { { bucketName } } # replace it with bucket Name
    dev: { { bucketName } } # replace it with Bucket Name
  account:
    prod: { { accountId } } # replace it with account id
    dev: { { accountId } } # replace it with account id
  vpc:
    dev: { { vpc-23434234 } } # replace it with vpc id
    prod: { { vpc-234234234 } } # replace it with vpc id
  subnet:
    dev:
      public-1: { { subnet-2323242 } } # replace it with subnet id
      private-1: { { subnet-4242323 } } # replace it with subnet id

  accountId: ${self:custom.account.${opt:stage, self:provider.stage}}
  vpcId: ${self:custom.vpc.${opt:stage, self:provider.stage}}
  subnetIdPublic1: ${self:custom.subnet.${opt:stage, self:provider.stage}.public-1}
  subnetIdPrivate1: ${self:custom.subnet.${opt:stage, self:provider.stage}.private-1}
  fargate:
    name: ecs-fargate
    # role: arn:aws:iam::${self:custom.accountId}:role/ecs-task-role
    role:
      Fn::Join:
        - ""
        - - "arn:aws:iam::${self:custom.accountId}:role/"
          - Ref: ECSPassRole
    vpc:
      public-ip: ENABLED
      subnets:
        # [!Ref SubnetId]
        - ${self:custom.subnetIdPublic1}
      security-groups: [!Ref "EcsSecurityGroup"]
    tasks:
      my-task:
        image: ${self:custom.accountId}.dkr.ecr.ap-southeast-1.amazonaws.com/{{ecr-image}}:latest # replace image name with your ecr image name
        override:
          container:
            PortMappings:
              - ContainerPort: 3000
          service:
            LoadBalancers:
              - ContainerName: my-task
                ContainerPort: "3000"
                TargetGroupArn: !Ref "ECSTG"
          role:
            Fn::Join:
              - ""
              - - "arn:aws:iam::${self:custom.accountId}:role/"
                - Ref: ECSPassRole
resources:
  Resources:
    # load balancer resource
    ECSALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: ECSALB
        Scheme: internet-facing
        LoadBalancerAttributes:
          - Key: idle_timeout.timeout_seconds
            Value: "30"
        Subnets:
          - ${self:custom.subnetIdPublic1}
          - ${self:custom.subnetIdPrivate1}
        SecurityGroups: [!Ref "EcsSecurityGroup"]
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      DependsOn: ECSServiceRole
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref "ECSTG"
        LoadBalancerArn: !Ref "ECSALB"
        Port: "80"
        Protocol: HTTP
    ECSALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      DependsOn: ALBListener
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn: !Ref "ECSTG"
        Conditions:
          - Field: path-pattern
            Values: [/]
        ListenerArn: !Ref "ALBListener"
        Priority: 1
    ECSTG:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      DependsOn: ECSALB
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /health
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        Name: ECSTG
        TargetType: ip
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 2
        VpcId: ${self:custom.vpcId}
    # ==========end load balancer resource =========
    # *********************new section *************
    # ==========VPC section start(if need to create new) =========
    # VpcId:
    #   Type: AWS::EC2::VPC
    #   Properties:
    #     CidrBlock: 172.45.0.0/16
    # SubnetId:
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     AvailabilityZone: ${self:provider.region}a
    #     CidrBlock: 172.45.21.0/24
    #     VpcId:
    #       Ref: VpcId
    # ==========end VPC section =========
    # ==========Security groups =========
    EcsSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: ECS Security Group
        VpcId: ${self:custom.vpcId}
    EcsSecurityGroupHTTPinbound:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref "EcsSecurityGroup"
        IpProtocol: tcp
        FromPort: "80"
        ToPort: "80"
        CidrIp: 0.0.0.0/0
    EcsSecurityGroupTCP3000inbound:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref "EcsSecurityGroup"
        IpProtocol: tcp
        FromPort: "3000"
        ToPort: "3000"
        CidrIp: 0.0.0.0/0
    EcsSecurityGroupSSHinbound:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref "EcsSecurityGroup"
        IpProtocol: tcp
        FromPort: "22"
        ToPort: "22"
        CidrIp: 0.0.0.0/0

    ECSPassRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: ["ecs-tasks.amazonaws.com"]
              Action: ["sts:AssumeRole"]
        Path: /
        Policies:
          - PolicyName: AmazonECSPassRolePolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "iam:PassRole"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - "ecs:*"
                    - "ecr:GetAuthorizationToken"
                    - "ecr:GetDownloadUrlForLayer"
                    - "ecr:BatchGetImage"
                    - "ecr:BatchCheckLayerAvailability"
                    - "ecr:PutImage"
                    - "ecr:InitiateLayerUpload"
                    - "ecr:UploadLayerPart"
                    - "ecr:CompleteLayerUpload"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "*"

    ECSServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: ["ecs.amazonaws.com"]
              Action: ["sts:AssumeRole"]
        Path: /
        Policies:
          - PolicyName: ecsServiceFargate
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "sts:AssumeRole"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                    - "elasticloadbalancing:DeregisterTargets"
                    - "elasticloadbalancing:Describe*"
                    - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                    - "elasticloadbalancing:RegisterTargets"
                    - "ec2:Describe*"
                    - "ec2:AuthorizeSecurityGroupIngress"
                  Resource: "*"
